USE Exec_control;
-------------------
--INDEX
-------------------
drop INDEX CUST_REPRESENT ON CUSTOMERS;
CREATE INDEX CUST_REPRESENT ON CUSTOMERS (CUST_REP);
select CUST_REP from CUSTOMERS  where CUST_REP = 101;
CREATE INDEX ORDERS_PROD ON ORDERS (PRODUCT);
CREATE INDEX ORDERS_CUST ON ORDERS (CUST);

-------------------
--TRIGGER
-------------------
CREATE OR ALTER TRIGGER SALESREPRS_PROMOTION
ON SALESREPRS
AFTER UPDATE
AS 
DECLARE @UPD_V CHAR(10), @UPD_ID INTEGER
IF ((select count(*) from deleted) > 0) 
BEGIN
	SELECT @UPD_ID = ID, @UPD_V = POSITION  FROM deleted;
	IF (@UPD_V) != (SELECT POSITION FROM SALESREPRS WHERE ID = @UPD_ID)	
	UPDATE SALESREPRS SET HIRE_DATE = GETDATE();
END;
RETURN;
--CHECK
UPDATE SALESREPRS SET POSITION = 'Trainee' WHERE ID = 17;
UPDATE SALESREPRS SET POSITION = 'Sales Rep' WHERE ID = 17;
INSERT INTO SALESREPRS VALUES (17,'Nancy Angelli',49,22,'Sales Rep','2006-11-14',null,186042.00);
DELETE FROM SALESREPRS WHERE ID=17;
SELECT * FROM SALESREPRS WHERE ID = 17;
--
create trigger minus_price
on products
after insert
as
if ((select count(*) from Products where avail <=0 or price <= 0) > 0)
begin
update Products set price = 0 where price <=0;
update Products set avail = 0 where avail <=0;
end;
RETURN;
drop trigger minus_priceon products;

CREATE OR ALTER TRIGGER SALESREPRS_INSERT_PRINT
ON SALESREPRS
AFTER INSERT
AS 
DECLARE @UPD_V CHAR(10), @UPD_ID INTEGER
IF ((select count(*) from INSERTED) > 0) 
BEGIN
	SELECT * FROM INSERTED;
END;
RETURN;
------------------
--VIEWS
------------------
create view managers as select * from SALESREPRS WHERE POSITION = 'Sales Mgr';
SELECT *FROM MANAGERS;

--CREATE
ALTER VIEW DELIVERED_ORDERS AS SELECT ORDERS.ID, ORDERS.PRODUCT, ORDERS.CUST, ORDERS.ORDER_DATE, DELIVERY_STATUS.DELIVERED 
FROM ORDERS INNER JOIN DELIVERY_STATUS
ON DELIVERY_STATUS.ID = ORDERS.ID
WHERE ORDERS.ID IN (SELECT DELIVERY_STATUS.ID FROM DELIVERY_STATUS WHERE DELIVERY_STATUS.DELIVERED IS NOT NULL);
SELECT * FROM DELIVERED_ORDERS;

------------------
--PROC
------------------
CREATE OR ALTER PROCEDURE POSITION_STATISTICS
AS 
BEGIN
DECLARE @MGR AS INT;
PRINT '-=-=-=-=-=-=-|STATISTICS|-=-=-=-=-=-=-'
SELECT @MGR = COUNT(*) FROM SALESREPRS WHERE POSITION = 'Sales Mgr'
PRINT  'MANAGERS: ' + CAST(@mgr AS VARCHAR)
SELECT @MGR = COUNT(*) FROM SALESREPRS WHERE POSITION = 'Sales Rep'
PRINT  'REPRESENTATIVES: ' + CAST(@mgr AS VARCHAR)
SELECT @MGR = COUNT(*) FROM SALESREPRS WHERE POSITION = 'Trainee'
PRINT  'TRAINEES: ' + CAST(@mgr AS VARCHAR)
PRINT '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'
END

EXEC POSITION_STATISTICS

CREATE OR ALTER PROCEDURE  OFFICES_STATISTICS
AS 
BEGIN
DECLARE @OFF_ID AS INT, @COUNT AS INT;
DECLARE OFFICES_CURS CURSOR FOR SELECT ID FROM OFFICES;
OPEN OFFICES_CURS
PRINT '-=-=-=-=-=-=-|OFFICES STATISTICS|-=-=-=-=-=-=-'
FETCH NEXT FROM OFFICES_CURS INTO @OFF_ID

WHILE @@FETCH_STATUS = 0  
BEGIN  
SELECT @COUNT = COUNT(*) FROM SALESREPRS WHERE OFFICE = @OFF_ID
PRINT  'OFFICE ' + CAST(@OFF_ID AS VARCHAR) + ': ' + CAST(@COUNT AS VARCHAR) + ' WORKERS'
FETCH NEXT FROM OFFICES_CURS INTO @OFF_ID
END
PRINT '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='
CLOSE OFFICES_CURS
END

EXEC OFFICES_STATISTICS

ALTER PROCEDURE ADDPROD_TO_CART
				@ORDER_ID INT,
				@PRODUCT_ID CHAR(5),
				@PRODUCTS_COUNT INT
AS BEGIN
SELECT @PRODUCT_ID = COUNT(*) FROM ORDERS_CART WHERE PROD_ID = @PRODUCT_ID and ORD_ID = @ORDER_ID;
IF (@PRODUCT_ID > 0) UPDATE ORDERS_CART SET PROD_COUNT+= @PRODUCTS_COUNT;
ELSE INSERT into ORDERS_CART(ORD_ID, PROD_ID, PROD_COUNT)
	values(@ORDER_ID, @PRODUCT_ID, @PRODUCTS_COUNT)
DECLARE @PRICE AS INT;
SELECT @PRICE = PRICE FROM PRODUCTS WHERE ID = @PRODUCT_ID; 
if (@price is not null) UPDATE ORDERS SET TOTAL_COST += @PRODUCTS_COUNT * @PRICE;
UPDATE PRODUCTS SET AVAIL -= @PRODUCTS_COUNT;
END

EXEC ADDPROD_TO_CART 1, '2A44G', 2;
EXEC ADDPROD_TO_CART 1, '2A45C', 2;
select * from ORDERS;
SELECT *fROM ORDERS_CART;
SELECT *fROM PRODUCTS WHERE ID = '2A44G'

create procedure current_ord 
as begin
select * from ORDERS where DELIVERED is null and PLANNED_D_DAY > GETDATE()
end;


create procedure overdue_ord 
as begin
select * from ORDERS where PLANNED_D_DAY > DELIVERED or (DELIVERED is null and PLANNED_D_DAY <= GETDATE())
end;


------------------
--FUNC
------------------
CREATE OR ALTER FUNCTION  OFFICES_SALES (@OFF_ID INT)
RETURNS INT
AS
BEGIN
DECLARE @SUM AS INT = 0;
SELECT @SUM = SUM(SALES) FROM SALESREPRS WHERE OFFICE = @OFF_ID
RETURN @SUM
END

SELECT DBO.OFFICES_SALES(21) AS OFFICE_SALES

CREATE OR ALTER FUNCTION  PROD_PRICE_AVAIL (@PROD_ID CHAR(5))
RETURNS INT
AS
BEGIN
DECLARE @PRICE AS INT, @AMOUNT as INT;
SELECT @PRICE = PRICE, @AMOUNT = AVAIL FROM PRODUCTS WHERE ID = @PROD_ID;
RETURN @PRICE * @amount
END

SELECT DBO.PROD_PRICE_AVAIL('41004')
